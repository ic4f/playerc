program MyFirstTest

    type 
	    arr1 = array of string;  	(* array decl *)  
	    arr2 = array of real;		(* array decl *)
	    arr3 = array of integer;	(* array decl *)	    
	    
    	rec1 = record				(* record decl *)
    		name : string;
	    	age  : integer;
    		cool : boolean;
	    end;	    
	    
	var
		v1, v2 : boolean := true; 	(* multiple ids, explicit boolean *)
		v3 : integer := 1; 			(* explicit integer *)
		v4 : real := 2.1; 			(* explicit real *)
		v5 : string := "test";		(* string *)	
		v6 := false;				(* implicit boolean *)
		v7 := 3;					(* implicit integer *)
		v8 := 4.7;					(* implicit real *)	
		v9 := v8;					(* implicit real from id *)
		v10 : real := 3;			(* integer to real conversion *)	
		
		v21 := arr1[< 3 of "abc", "x", "y", "zzz" >];	 						
		v22 := arr2[< 3 of 5.4, 6 >];	 	
		v23 := arr3[< 1, 3 of 24, 62 >];	
		
		v31 := rec1{ name := "sergei"; age := 100; cool := true }; (* record construction *) 					
		v32 : rec1 := null;
		
	procedure 
		proc1() begin end;							(* empty procedure *)	 		
				 	
	 	proc3(a : integer) : integer				(* recursive call *)
	 		begin
	 			if a > 0 then
		 			return a + proc3(a-1);
		 		else
		 			return -1;
		 		end;	 			
	 		end;	
	 			 		

	 	proc4(a : integer) : integer				(* call to another procedure *)
	 		var
	 			b := 3;
	 			c := 2;	 			
	 		begin
	 			return a + b * proc3(c);
	 		end;	
	 			 													 			
		proc5(a : integer) : integer			(* nested procedures *)	
			var a1 := 1;

			procedure proc5a(a : integer) : integer 
				var a1 := 1;

				procedure proc5b(a : integer) : integer 
					var a1 := 1;					
					begin
						return a1;
					end;
					
				begin
					return a1 + proc5b(a);
				end;
				
			begin
				return a1 + proc5a(a);			
			end;
	 		
	begin
	
		v4 := +3.2 + (4 - 5) * -2 / 10;			(* arithmentic expression *)
		v6 := not v6;							(* unary logical op *)
		v6 := v6 and true or v1;				(* binary logical op *)
		v6 := 1 < 2;							(* relational binary op *)
		v6 := 1.2 <= 2;							(* relational binary op + int to real conversion *)
		v6 := 1 > 2;							(* relational binary op *)
		v6 := 1 >= 2;							(* relational binary op *)
		v6 := 1 <> 2;							(* relational binary op *)
		v6 := 1 = 2;							(* relational binary op *)
		
		v5 := v21[1]; 							(* lookup *)
		v5 := v21[v23[0]];  					(* nested lookup *)
		
		v5 := v31.name; 						(* dereferencing and assigning to record members *)
		v3 := v31.age;
		v6 := v31.cool;
		v31.name := v5;
		v31.age := v3;
		v31.cool := v6;		

		if 1 = 2 								(* if-then statement *)
			then v5 := "a"; 
		elseif (4 = 5) and (3 < 1 + 1)
			then v5 := "a";
		else 
			v5 := "a"; 
		end;	
		
		loop									(* loop statement *)
			v5 := "a";
			write(v5, v7);							(* write statement*)		
			exit;
		end;
		
		for i := 0 to 10-1 do 					(* for statement *)
			v5 := "a";
			write(v5);		
			exit;			
		end;			
		
		read(v5, v3, v8);						(* read statement *)
		
		v3 := proc4(5);

	
		



	end
