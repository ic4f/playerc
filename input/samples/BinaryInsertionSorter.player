program BinaryInsertionSorter

	type arrNum = array of integer;
	var numbers := arrNum [< 0, 0, 0, 0, 0, 0 >];

	procedure 
	
		sort(input : arrNum; length : integer) : arrNum
			var v := 0;
			var insertPosition := 0;
			begin
				for i := 1 to length do				
					v := input[i];
					insertPosition := findInsertPosition(input, 0, i, input[i]);
					for j := i - 1 to insertPosition-1 by -1 do
						input[j + 1] := input[j];
					end;
				input[insertPosition] := v;
			end;
			return input;
		end;
	
		findInsertPosition(input : arrNum; left : integer; right : integer; value : integer) : integer
			var midpoint := 0;
			begin			
				
				if left = right then
					return left;
		        end;	
			
				midpoint := (left + right) / 2;
						        
		        if value > input[midpoint] then
					return findInsertPosition(input, midpoint + 1, right, value);
				elseif value < input[midpoint] then
					return findInsertPosition(input, left, midpoint, value);
				end;		        
        
				return midpoint;
				
			end;
			
	begin	

		write("enter 6 numbers:");
		
		for i := 0 to 6 do
			read(numbers[i]);
		end;
		
		sort(numbers, 6);
		
		for i := 0 to 6 do
			write(numbers[i]);
		end;
		
	end
